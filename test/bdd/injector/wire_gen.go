// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package injector

import (
	"github.com/trend-me/ai-requester/internal/config/connections"
	"github.com/trend-me/ai-requester/internal/config/properties"
	"github.com/trend-me/ai-requester/internal/delivery/controllers"
	"github.com/trend-me/ai-requester/internal/domain/factories"
	"github.com/trend-me/ai-requester/internal/domain/interfaces"
	"github.com/trend-me/ai-requester/internal/domain/usecases"
	"github.com/trend-me/ai-requester/internal/integration/api"
	"github.com/trend-me/ai-requester/internal/integration/queue"
	"github.com/trend-me/golang-rabbitmq-lib/rabbitmq"
)

// Injectors from wire.go:

func InitializeQueueAiRequesterConsumerMock(geminiMock interfaces.Ai) (interfaces.QueueAiRequesterConsumer, error) {
	connection, err := connections.ConnectQueue()
	if err != nil {
		return nil, err
	}
	connectionAiCallback := newQueueConnectionAiCallback(connection)
	queueAiCallback := queue.NewAiRequester(connectionAiCallback)
	aiFactory := factories.NewAiFactory(geminiMock)
	urlApiPromptRoadMapConfig := urlApiPromptRoadMapConfigGetter()
	apiPromptRoadMapConfig := api.NewApiPromptRoadMapConfig(urlApiPromptRoadMapConfig)
	urlApiValidation := urlApiValidationGetter()
	apiValidation := api.NewValidation(urlApiValidation)
	useCase := usecases.NewUseCase(queueAiCallback, aiFactory, apiPromptRoadMapConfig, apiValidation)
	controller := controllers.NewController(useCase)
	connectionAiRequesterConsumer := newQueueConnectionAiRequesterConsumer(connection)
	queueAiRequesterConsumer := newQueueAiRequesterConsumer(controller, connectionAiRequesterConsumer)
	return queueAiRequesterConsumer, nil
}

// wire.go:

func newQueueConnectionAiRequesterConsumer(connection *rabbitmq.Connection) queue.ConnectionAiRequesterConsumer {
	return rabbitmq.NewQueue(
		connection, properties.QueueAiRequester, rabbitmq.ContentTypeJson, properties.CreateQueueIfNX(), true,
		true,
	)
}

func newQueueConnectionAiCallback(connection *rabbitmq.Connection) queue.ConnectionAiCallback {
	return rabbitmq.NewQueue(
		connection, properties.QueueAiCallback, rabbitmq.ContentTypeJson, properties.CreateQueueIfNX(), true,
		true,
	)
}

func newQueueAiRequesterConsumer(controller interfaces.Controller, connectionAiPromptBuilderConsumer queue.ConnectionAiRequesterConsumer) interfaces.QueueAiRequesterConsumer {
	return queue.NewAiPromptBuilderConsumer(connectionAiPromptBuilderConsumer, controller)
}

func urlApiValidationGetter() api.UrlApiValidation {
	return properties.UrlApiValidation
}

func urlApiPromptRoadMapConfigGetter() api.UrlApiPromptRoadMapConfig {
	return properties.UrlApiPromptRoadMapConfig
}
